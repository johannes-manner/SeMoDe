#!/bin/bash
PACKAGES_DIR=deployment-packages
DEPLOYMENT_DIR=deployment
#SERVICE_SIZES=(initial 3125000 6250000 12500000 25000000 50000000)
#MEMORY_SETTINGS=(128 256 512 1024 2048 3008)
SERVICE_SIZES=(initial DEPLOYMENT_SIZES)
MEMORY_SETTINGS=(MEMORY_SIZES)

if [ -z "$1" ]; then
    echo "Usage: createDeployments <PATH_TO_SEMODE.JAR>"
    exit 1
fi

function createDir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

function createDeploymentSizes() {
    createDir "${PACKAGES_DIR}"
	
	for size in ${SERVICE_SIZES[@]}; do
		echo "Creating size ${size}"
		if [ "${size}" = "initial" ]; then
			cp "fibonacci.js" "${PACKAGES_DIR}/fibonacci.js"
			cd "${PACKAGES_DIR}/"
		else
			java -jar "../$1" "deploymentSize" "fibonacci.js" "${size}" "///"
		fi
		createDir "${size}"
		cp "fibonacci.js" "${size}/fibonacci-js-${size}.js"
    done
	cd ".."
	rm -rf "logs"
}

function createServices() {
    for size in ${SERVICE_SIZES[@]}; do
        for mem in ${MEMORY_SETTINGS[@]}; do
            echo "Create function: size=${size} memory=${mem}"

            serviceDir="$DEPLOYMENT_DIR/fibonacci_js_${size}_${mem}"

            createDir "${serviceDir}"
            cp "${PACKAGES_DIR}/${size}/fibonacci-js-${size}.js" "${serviceDir}/fibonacci.js"
			cp "package.json" "${serviceDir}/package.json"
			cp -r "node_modules" "${serviceDir}"
			cp "serverless.yml" "${serviceDir}/serverless.yml"
			
            addFunctionToServerlessConfig "${size}" "${mem}" "${serviceDir}"
        done
    done
}

function addFunctionToServerlessConfig() {
    size="$1"
    mem="$2"
    serviceDir="$3"

yml="provider:
  name: openwhisk
  region: eu-gb
  memory: ${mem}
  timeout: 300
  
plugins:
  - serverless-openwhisk

service: fibonacci_js_${size}_${mem}

functions:
  fibonacci_js_${size}_${mem}:
    handler: fibonacci.fibonacci
    events:
      - http:
          path: functions/fibonacci_js_${size}_${mem}
          method: post
          resp: json"
      
    echo "${yml}" >> "${serviceDir}/serverless.yml"
}

createDeploymentSizes "$1"
createServices
