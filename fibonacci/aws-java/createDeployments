#!/bin/bash
PACKAGES_DIR=deployment-packages
DEPLOYMENT_DIR=deployment
#JM Vorbedingung: service size = package size + optional initial (service size werden deployed) sizes müssen größer sein als das Packet (in Java ~> 1.5MB)
PACKAGE_SIZES=(4562500)
SERVICE_SIZES=(initial 4562500)
MEMORY_SETTINGS=(128 256)

# path to semode wegen dem deployment package enlarger
if [ -z "$1" ]; then
    echo "Usage: createDeployments <PATH_TO_SEMODE.JAR>"
    exit 1
fi

function createDir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

function createDeploymentSizes() {
    createDir "${PACKAGES_DIR}"

    # initial size
    cp "build/distributions/fibonacci-java.zip" "${PACKAGES_DIR}/fibonacci-java-initial.zip"

    # other sizes
    echo " "
    before="initial"
    for size in ${PACKAGE_SIZES[@]}; do
        echo "Create deployment package size: ${size}"
        echo "..."
        cp "${PACKAGES_DIR}/fibonacci-java-${before}.zip" "${PACKAGES_DIR}/fibonacci-java-${size}.zip"
        java -jar "$1" "deploymentSize" "${PACKAGES_DIR}/fibonacci-java-${size}.zip" "${size}"
        echo "Done"
        echo " "
        before="${size}"
    done
}

function createServices() {
    for size in ${SERVICE_SIZES[@]}; do
        for mem in ${MEMORY_SETTINGS[@]}; do
            echo "Create function: size=${size} memory=${mem}"

            serviceDir="$DEPLOYMENT_DIR/fibonacci-java-${size}-${mem}"

            createDir "${serviceDir}"
            cp "${PACKAGES_DIR}/fibonacci-java-${size}.zip" "${serviceDir}/fibonacci.zip"
            cp "serverless-template.yml" "${serviceDir}/serverless.yml"

            addFunctionToServerlessConfig "${size}" "${mem}" "${serviceDir}"
        done
    done
}

function addFunctionToServerlessConfig() {
    size="$1"
    mem="$2"
    serviceDir="$3"

    function="  fibonacci-java-${size}-${mem}:
    handler: de.uniba.dsg.serverless.fibonacci.aws.Fibonacci
    memorySize: ${mem}
    events:
      - http:
          path: fibonacci-java-${size}-${mem}
          method: get
          integration: lambda
          request:
            template:
              application/json: \${file(../../serverless-input-template)}
          response:
            headers:
              Content-Type: \"'application/json'\"
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '[\s\S]*\[400\][\s\S]*'
                template: \$input.path('\$.errorMessage')
      - http:
          path: fibonacci-java-${size}-${mem}
          method: post
          integration: lambda
          request:
            template:
              application/json: \${file(../../serverless-input-template)}
          response:
            headers:
              Content-Type: \"'application/json'\"
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '[\s\S]*\[400\][\s\S]*'
                template: \$input.path('\$.errorMessage')"

    echo "service: fibonacci-java-${size}-${mem}" >> "${serviceDir}/serverless.yml" 
    echo "functions:" >> "${serviceDir}/serverless.yml"
    echo "${function}" >> "${serviceDir}/serverless.yml"
}

./gradlew build
createDeploymentSizes "$1"
createServices
