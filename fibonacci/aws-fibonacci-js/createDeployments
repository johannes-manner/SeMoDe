#!/bin/bash
PACKAGES_DIR=deployment-packages
DEPLOYMENT_DIR=deployment
SERVICE_SIZES=(initial 3125000 6250000 12500000 25000000 50000000)
MEMORY_SETTINGS=(128 256 512 1024 2048 3008)

if [ -z "$1" ]; then
    echo "Usage: createDeployments <PATH_TO_SEMODE.JAR>"
    exit 1
fi

function createDir() {
    if [ ! -d "$1" ]; then
        mkdir -p "$1"
    fi
}

function createDeploymentSizes() {
    createDir "${PACKAGES_DIR}"
	
	for size in ${SERVICE_SIZES[@]}; do
		echo "Creating size ${size}"
		if [ "${size}" = "initial" ]; then
			cp "fibonacci.js" "${PACKAGES_DIR}/fibonacci.js"
			cp "serverless-package.yml" "${PACKAGES_DIR}/serverless.yml"
			cd "${PACKAGES_DIR}/"
		else
			java -jar "../$1" "deploymentSize" "fibonacci.js" "${size}" "///"
		fi
		createDir "${size}"
		cp "fibonacci.js" "${size}/fibonacci-js-${size}.js"
		cp "serverless.yml" "${size}/serverless.yml"
		cd "${size}"
		serverless package --package out
		cd ".."
		cp "${size}/out/fibonacci-js.zip" "fibonacci-js-${size}.zip"
		rm -rf "${size}"
    done
	cd ".."
	rm "serverless.yml"
	rm -rf "logs"
}

function createServices() {
    for size in ${SERVICE_SIZES[@]}; do
        for mem in ${MEMORY_SETTINGS[@]}; do
            echo "Create function: size=${size} memory=${mem}"

            serviceDir="$DEPLOYMENT_DIR/fibonacci-js-${size}-${mem}"

            createDir "${serviceDir}"
            cp "${PACKAGES_DIR}/fibonacci-js-${size}.zip" "${serviceDir}/fibonacci.zip"
            cp "serverless-template.yml" "${serviceDir}/serverless.yml"
			
            addFunctionToServerlessConfig "${size}" "${mem}" "${serviceDir}"
        done
    done
}

function addFunctionToServerlessConfig() {
    size="$1"
    mem="$2"
    serviceDir="$3"

    function="  fibonacci-js-${size}-${mem}:
    handler: fibonacci.handler
    memorySize: ${mem}
    events:
      - http:
          path: fibonacci-js-${size}-${mem}
          method: get
          integration: lambda
          request:
            template:
              application/json: \${file(../../serverless-input-template)}
          response:
            headers:
              Content-Type: \"'application/json'\"
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '[\s\S]*\[400\][\s\S]*'
                template: \$input.path('\$.errorMessage')
      - http:
          path: fibonacci-js-${size}-${mem}
          method: post
          integration: lambda
          request:
            template:
              application/json: \${file(../../serverless-input-template)}
          response:
            headers:
              Content-Type: \"'application/json'\"
            statusCodes:
              200:
                pattern: ''
              400:
                pattern: '[\s\S]*\[400\][\s\S]*'
                template: \$input.path('\$.errorMessage')"

    echo "service: fibonacci-js-${size}-${mem}" >> "${serviceDir}/serverless.yml" 
    echo "functions:" >> "${serviceDir}/serverless.yml"
    echo "${function}" >> "${serviceDir}/serverless.yml"
}

createDeploymentSizes "$1"
createServices
